- name: disable nodejs
  ansible.builtin.command: dnf module disable nodejs -y
  
- name: enabled nodejs:20
  ansible.builtin.command: dnf module enable nodejs:20 -y

- name: Install Mysql & NodeJs
  ansible.builtin.dnf:
    name: "{{ item }}"
    state: latest
  loop:
  - mysql
  - nodejs

- name: add user expense
  ansible.builtin.user:
    name: expense
    state: present

# - name: create /app directory
#   ansible.builtin.file:
#     path: /app
#     state: directory

# - name: download backend code
#   ansible.builtin.get_url:
#     url: https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip
#     dest: /tmp/backend.zip

# # we can also use this instead of get_url module ansible.builtin.command: curl -o /tmp/backend.zip https://expense-builds.s3.us-east-1.amazonaws.com/expense-backend-v2.zip

# - name: unzip backend code
#   ansible.builtin.unarchive:
#     src: /tmp/backend.zip
#     dest: /app
#     remote_src: yes

- name: run app pre-req
  tags:
  - deployment
  ansible.builtin.import_role:
    name: common
    tasks_from: pre-req


- name: install npm dependencies
  tags:
  - deployment
  ansible.builtin.command: npm install
  args:
    chdir: /app

- name: create backend.service
  ansible.builtin.template:
    src: backend.service.j2
    dest: /etc/systemd/system/backend.service
  notify:
  - reload daemon

- name: install python mysql dependencies
  ansible.builtin.pip:
    name:
    - PyMySQL
    - cryptography
    executable: pip3.9

- name: load mysql data
  community.mysql.mysql_db:
    login_user: "{{login_user}}"
    login_password: "{{mysql_root_password}}"
    login_host: "{{login_host}}"
    target: /app/schema/backend.sql
    state: import
    name: all

- name: restart and enable backend service
  tags:
  - deployment
  ansible.builtin.service:
    name: backend
    state: restarted
    enabled: true